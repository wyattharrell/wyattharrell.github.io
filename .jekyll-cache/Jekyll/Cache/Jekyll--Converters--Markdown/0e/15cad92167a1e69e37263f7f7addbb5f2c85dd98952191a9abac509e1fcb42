I"}<!-- View on GitHub -->
<center><a class="github-button" href="https://github.com/wyattharrell/Conways-Game-of-Life" data-color-scheme="no-preference: dark; light: dark; dark: dark;" data-size="large" aria-label="Use this template wyattharrell/istats on GitHub">View on GitHub</a></center>

<blockquote>
  <p>The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is Turing complete and can simulate a universal constructor or any other Turing machine.
– <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank">Conway’s Game of Life, <em>Wikipedia</em></a></p>
</blockquote>

<h3 id="motivation">Motivation</h3>

<p>During my first computer science build week at Lambda School, I built Conway’s Game of Life as an iOS app. The app is complete with a library of presents, the ability to play, pause, skip forward, and wipe the board. It also allows the user to tap the cells, toggling them as alive or dead. I was extrememly happy with how the app turned out and I am specifically proud of the UI.</p>

<h3 id="kvo-in-swift">KVO in Swift</h3>

<p>In order to update the current generation number and live cell population as they fluctuated, I needed to use key-value observing. I had previously used KVO in an Objective-C project so it was interesting to see how it works in Swift.</p>

<p>I first conformed the
<code class="highlighter-rouge">swift 
GameBoard</code> class to <code class="highlighter-rouge">NSObject</code>. Then I added the <code class="highlighter-rouge">@objc dynamic</code> attributes to the generation and population variables.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">GameBoard</span><span class="p">:</span> <span class="kt">NSObject</span> <span class="p">{</span>
    <span class="c1">// MARK: - Properties</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">generation</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">population</span><span class="p">:</span> <span class="kt">Int</span></code></pre></figure>

<p>Back in the <code class="highlighter-rouge">GameOfLifeViewController</code>, I set up the observers to configure the labels.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">GameBoard</span><span class="p">:</span> <span class="kt">NSObject</span> <span class="p">{</span>
<span class="kd">private</span> <span class="k">var</span> <span class="nv">generationObserver</span><span class="p">:</span> <span class="kt">NSKeyValueObservation</span><span class="p">?</span>
<span class="kd">private</span> <span class="k">var</span> <span class="nv">populationObserver</span><span class="p">:</span> <span class="kt">NSKeyValueObservation</span><span class="p">?</span>

<span class="n">generationObserver</span> <span class="o">=</span> <span class="n">golView</span><span class="o">.</span><span class="n">gameBoard</span><span class="o">.</span><span class="nf">observe</span><span class="p">(\</span><span class="o">.</span><span class="n">generation</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">object</span><span class="p">,</span> <span class="n">_</span>  <span class="k">in</span>
	<span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">generationLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Generation</span><span class="se">\n\(</span><span class="n">object</span><span class="o">.</span><span class="n">generation</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>

<span class="n">populationObserver</span> <span class="o">=</span> <span class="n">golView</span><span class="o">.</span><span class="n">gameBoard</span><span class="o">.</span><span class="nf">observe</span><span class="p">(\</span><span class="o">.</span><span class="n">population</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">object</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span>
	<span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">populationLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Population</span><span class="se">\n\(</span><span class="n">object</span><span class="o">.</span><span class="n">population</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span></code></pre></figure>

:ET