I"w<h3 id="motivation">Motivation</h3>

<p>As my second building exercise at Lambda School, I worked in a cross functional team of web developers, data scientists, and iOS developers. I assumed the senior iOS developer role and led my team to create a how-to tutorial app. The app featured login and registration for both an instructor and a user. Users were able to view and bookmark their favorite tutorials while instructors could create and share new tutorials within the app. Each user would be presented with their corresponing onboarding processes upon regestration. Once logged in, they were presented with a feed of tutorials sorted by number of likes. They could view, search, and bookmark these tutorials. Once bookmarked, a tutorial was added to CoreData for offline viewing.</p>

<h3 id="challenges">Challenges</h3>

<p>One of the challenges that arose early on in the development process was the ability to send POST requests for creating tutorials. In order to create a how-to tutorial, an instructor had to send a POST request with a title and summary using their given instructor ID. Once they received a response from the server with the newly created tutorial ID, they had to then POST each tutorial step individually using the retured tutorial ID. To solve this problem, I</p>

<pre><code>
```
let tut = Tut(title: title, summary: summary, instructor_id: instructorID)
        var returnedTutorial: Tutorial?
            
        let createTutorialOpertation = BlockOperation {
            print("Creating Tutorial...")
            self.apiController.createTutorial(tutorial: tut) { tutorial, error in
                if let error = error {
                    NSLog("Error creating tutorial \(error)")
                }
                
                if let tutorial = tutorial {
                    returnedTutorial = tutorial
                    print("Tut id:  \(tutorial.id)")
                }
            }
        }
        
        let createStepsOperation = BlockOperation {
            print("Creating Steps...")
            for i in 0..&lt;self.numberOfSteps - 1 {

                let steps = TutorialSteps(instructions: self.instruc[i], step_number: i)
                
                self.apiController.createTutorialSteps(tutorialSteps: steps, for: returnedTutorial?.id ?? 0) { _, error in
                    if let error = error {
                        NSLog(Error creating tutorial steps \(error))
                    }
                    
                    DispatchQueue.main.async {
                        if i == self.numberOfSteps {
                            self.navigationController?.popViewController(animated: true)
                        }
                    }
                }
            }
        }
        
        createStepsOperation.addDependency(createTutorialOpertation)
        queue.addOperations([createTutorialOpertation, createStepsOperation], waitUntilFinished: true)

```
&lt;/pre&gt;</code>


### My Role

My role began as the senior iOS developer on a cross functional build week. I quickly assumed the role of both the junior and senior iOS 

<!-- Place this tag where you want the button to render. -->
<center><a class="github-button" href="https://github.com/BuildWeek-HowTo-2/iOS" data-color-scheme="no-preference: dark; light: dark; dark: dark;" data-size="large" aria-label="Use this template wyattharrell/istats on GitHub">View on GitHub</a></center>




</pre>
:ET